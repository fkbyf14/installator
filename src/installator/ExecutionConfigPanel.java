package installator;

import installator.stages.config.StagePanel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * @author cfif11
 */
class ExecutionConfigPanel extends StagePanel<Boolean> {

	public static final String TEXT_FOR_SUCCESS_INSTALL = "Установка успешно завершена! Для выхода из установки нажмите \"Продолжить\".";
	private JPanel panel1;
	private JButton button1;
	private JTextPane textPane1;
	private JProgressBar progressBar1;
	private JButton button2;
	private Execution execution;
	private ExecutionConfigStage executionConfigStage;
	private	Thread threadExecute;
	private ActionListener exitListener = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			int userAnswer = JOptionPane.showOptionDialog($$$getRootComponent$$$(), "Вы действительно хотите отменить установку?",
					"Выход из установки", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
			System.out.println("userAnswer" + userAnswer);
			if (userAnswer == 0) {
				threadExecute.interrupt();
				exit();
			}
		}
	};

	ExecutionConfigPanel(int index, String text, ExecutionConfigStage executionConfigStage) {
		super(index);
		this.executionConfigStage = executionConfigStage;
		textPane1.setText(text);
		init();
		button2.setEnabled(false);
		button1.addActionListener(exitListener);
		button2.addActionListener(nextListener);
	}


	@Override
	public JPanel getGUI() {
		return panel1;
	}

	@Override
	protected void init() {
		panel1.setSize(STANDARD_SIZE);
		button1.setText(CANCEL);
		button2.setText(NEXT);

	}

	void setExecution(Execution execution) {
		this.execution = execution;
	}

	@Override
	protected Boolean doInGUI() {
		threadExecute = Thread.currentThread();
		if (execution.run(executionConfigStage) != -1) {
			button2.setEnabled(true);
			textPane1.setText(TEXT_FOR_SUCCESS_INSTALL);
			data = true;
			return super.doInGUI();
		} else {
			return null;
		}
	}

	void changeState(int value) {
		progressBar1.setValue(value);
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panel1 = new JPanel();
		panel1.setLayout(new BorderLayout(0, 0));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new BorderLayout(0, 0));
		panel1.add(panel2, BorderLayout.SOUTH);
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		panel2.add(panel3, BorderLayout.EAST);
		button1 = new JButton();
		button1.setText("Button");
		panel3.add(button1);
		button2 = new JButton();
		button2.setText("Button");
		panel3.add(button2);
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new BorderLayout(0, 0));
		panel1.add(panel4, BorderLayout.NORTH);
		textPane1 = new JTextPane();
		panel4.add(textPane1, BorderLayout.CENTER);
		final JPanel panel5 = new JPanel();
		panel5.setLayout(new GridBagLayout());
		panel1.add(panel5, BorderLayout.CENTER);
		progressBar1 = new JProgressBar();
		progressBar1.setStringPainted(true);
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 0.1;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel5.add(progressBar1, gbc);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel1;
	}
}
